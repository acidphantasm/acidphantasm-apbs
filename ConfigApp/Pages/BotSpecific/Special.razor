@page "/special"
@inherits LayoutComponentBase
@inject ISnackbar Snackbar
@using static Core.DataLoader;

<style>
    .mud-divider {
        border-width: 2.5px;
    }
</style>

<MudMainContent>
    <MudContainer Class="mb-20">
        <MudExpansionPanels MultiExpansion="true">
            <MudExpansionPanel Class="mud-expansion-panels-borders ma-3 pa-5" Text="Special Specific Configuration" Expanded=true>
                <MudGrid>

                    <MudItem xs="1">
                        <MudPaper Class="d-flex justify-center mud-width-full ma-1" Elevation="0">
                            <MudTooltip Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                <ChildContent>
                                    <MudIconButton Icon="@Icons.Material.Filled.Warning" Size="Size.Small" />
                                </ChildContent>
                                <TooltipContent>
                                    <MudText Typo="Typo.caption">All settings on this page, and any other setting that may impact these bots are controlled by this toggle.</MudText><MudSpacer />
                                    <MudSpacer />
                                    <MudText Typo="Typo.caption">EXCEPTION: Normalize Health is always applied if enabled but not excluded.</MudText>
                                </TooltipContent>
                            </MudTooltip>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="4">
                        <MudPaper Class="d-flex align-center mud-width-full ma-1" Elevation="0">
                            <MudTooltip Text="Grants APBS control over Special Bots (Raiders, Rogues, Cultists, and Bloodhounds). You will have vanilla versions of these bots if disabled." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                <MudText>Special Bot Generation</MudText>
                            </MudTooltip>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="6">
                        <MudPaper Class="d-flex align-center mud-width-full" Elevation="0">
                            <MudSwitch T="bool" @bind-Value="_specialEnabled" Color="Color.Success" UncheckedColor="Color.Default" LabelPlacement="Placement.End">@_specialEnabled</MudSwitch>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="1">
                        @if (MainLayout.pendingChanges.Contains("_specialEnabled") && MainLayout._appUndoButtonToggle)
                        {
                            <MudButton @onclick="undoSpecialBots" Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Small">Undo</MudButton>
                        }
                        else if (_specialEnabled != true && MainLayout._appDefaultButtonToggle)
                        {
                            <MudButton @onclick="defaultSpecialBots" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">Default</MudButton>
                        }
                    </MudItem>

                </MudGrid>
            </MudExpansionPanel>
            @if (_specialEnabled)
            {
                <MudExpansionPanel Class="mud-expansion-panels-borders ma-3 pa-5" Style="padding-bottom:25px" Text="Special Specific Options" Expanded=true>
                    <MudGrid>

                        <MudItem xs="1" />
                        <MudItem xs="4">
                            <MudPaper Class="d-flex align-center mud-width-full ma-1" Elevation="0">
                                <MudTooltip Text="Allows Special Bots to spawn with additional loot." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                    <MudText>Loot</MudText>
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center mud-width-full" Elevation="0">
                                <MudSwitch T="bool" @bind-Value="@_specialLootEnabled" Color="Color.Success" UncheckedColor="Color.Default" LabelPlacement="Placement.End">@_specialLootEnabled</MudSwitch>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="1">
                            @if (MainLayout.pendingChanges.Contains("_specialLootEnabled") && MainLayout._appUndoButtonToggle || MainLayout.pendingChanges.Contains("_specialLootBlacklist") && MainLayout._appUndoButtonToggle)
                            {
                                <MudButton @onclick="undoLoot" Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Small">Undo</MudButton>
                            }
                            else if (_specialLootEnabled != true && MainLayout._appDefaultButtonToggle || _specialLootBlacklist.Count > 0 && MainLayout._appDefaultButtonToggle)
                            {
                                <MudButton @onclick="defaultLoot" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">Default</MudButton>
                            }
                        </MudItem>

                        <MudItem xs="1">
                            <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-2">
                                <MudTooltip Text="Only valid MongoIDs are accepted. Enter the ID of the weapon you want blacklisted, then click the arrow (or press enter) to add it to the blacklist." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                    <MudIconButton Icon="@Icons.Material.Filled.Warning" Size="Size.Small" />
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="4" Class="align-center">
                            <MudTextField T="string" @bind-Value="@_lootBlacklistEntryHolder"
                                          Typo="Typo.body2" HelperText="Enter valid MongoID"
                                          Placeholder="ItemID"
                                          Variant="Variant.Text"
                                          OnKeyDown="@((e) => {
                                                    if (HandleKeyDown(e))
                                                    {
                                                        if (CanAddMongoIDToList(_lootBlacklistEntryHolder, _specialLootBlacklist))
                                                        {
                                                            _specialLootBlacklist.Add(_lootBlacklistEntryHolder);
                                                            Utils.UpdateView(_specialLootBlacklist, OriginalConfig.specialBots.lootConfig.blacklist, "_specialLootBlacklist");
                                                        } else {
                                                            Utils.UpdateView(_specialLootBlacklist, OriginalConfig.specialBots.lootConfig.blacklist, "_specialLootBlacklist");
                                                        }
                                                    }
                                                } )"
                                          Validation="@(new Func<string, IEnumerable<string>>(Utils.StringObjectIDValidation))"
                                          Immediate="true"
                                          Adornment="Adornment.End"
                                          AdornmentIcon="@Icons.Material.Filled.ArrowRight"
                                          OnAdornmentClick="@(() => {
                                                    if (CanAddMongoIDToList(_lootBlacklistEntryHolder, _specialLootBlacklist))
                                                    {
                                                        _specialLootBlacklist.Add(_lootBlacklistEntryHolder);
                                                        Utils.UpdateView(_specialLootBlacklist, OriginalConfig.specialBots.lootConfig.blacklist, "_specialLootBlacklist");
                                                    } else {
                                                        Utils.UpdateView(_specialLootBlacklist, OriginalConfig.specialBots.lootConfig.blacklist, "_specialLootBlacklist");
                                                    }
                                                } )" />

                        </MudItem>
                        <MudItem xs="6">
                            @foreach (var item in _specialLootBlacklist)
                            {
                                <MudChip Value="@item" T="string" Color="Color.Default" OnClose="@(() => {
                                        _specialLootBlacklist.Remove(item);
                                        Utils.UpdateView(_specialLootBlacklist, OriginalConfig.specialBots.lootConfig.blacklist, "_specialLootBlacklist");
                                    })">@item</MudChip>
                            }
                        </MudItem>

                        <MudDivider DividerType="DividerType.FullWidth" Class="my-3" />

                        <MudItem xs="1" />
                        <MudItem xs="4">
                            <MudPaper Class="d-flex align-center mud-width-full ma-1" Elevation="0">
                                <MudTooltip Text="Allows random resource consumption on Food/Drink/Medical Items." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                    <MudText>Resource Randomization</MudText>
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center mud-width-full" Elevation="0">
                                <MudSwitch T="bool" @bind-Value="_specialResourceRandomizationEnabled" Color="Color.Success" UncheckedColor="Color.Default" LabelPlacement="Placement.End">@_specialResourceRandomizationEnabled</MudSwitch>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="1">
                            @if (
                           MainLayout.pendingChanges.Contains("_specialResourceRandomizationEnabled") && MainLayout._appUndoButtonToggle ||
                           MainLayout.pendingChanges.Contains("_specialMedRateMaxChance") && MainLayout._appUndoButtonToggle ||
                           MainLayout.pendingChanges.Contains("_specialMedRateUsagePercent") && MainLayout._appUndoButtonToggle ||
                           MainLayout.pendingChanges.Contains("_specialFoodRateMaxChance") && MainLayout._appUndoButtonToggle ||
                           MainLayout.pendingChanges.Contains("_specialFoodRateUsagePercent") && MainLayout._appUndoButtonToggle)
                            {
                                <MudButton @onclick="undoResourceRandomization" Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Small">Undo</MudButton>
                            }
                            else if (
                            _specialResourceRandomizationEnabled != true && MainLayout._appDefaultButtonToggle ||
                            _specialMedRateMaxChance != 15 && MainLayout._appDefaultButtonToggle ||
                            _specialMedRateUsagePercent != 25 && MainLayout._appDefaultButtonToggle ||
                            _specialFoodRateMaxChance != 15 && MainLayout._appDefaultButtonToggle ||
                            _specialFoodRateUsagePercent != 25 && MainLayout._appDefaultButtonToggle)
                            {
                                <MudButton @onclick="defaultResourceRandomization" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">Default</MudButton>
                            }
                        </MudItem>

                        <MudItem xs="2" />
                        <MudItem xs="3">
                            <MudTooltip Text="Medical & Food full chances and minimum usage percent." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                <MudText>Medical & Food Values</MudText>
                            </MudTooltip>
                        </MudItem>
                        <MudItem xs="3">
                            <MudPaper Class="d-flex align-start mud-width-full" Style="margin-top: -20px;" Elevation="0">
                                <MudTooltip Text="Chance for medical items to be full resource usage." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialMedRateMaxChance" Label="Full Chance" HelperText="Medical" Variant="Variant.Filled" Min="1" Max="100" Disabled="!_specialResourceRandomizationEnabled" />
                                </MudTooltip>
                                <MudTooltip Text="Lowest percent possible for a medical item's usage to be." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialMedRateUsagePercent" Label="Minimum %" HelperText="Medical" Variant="Variant.Filled" Min="1" Max="100" Disabled="!_specialResourceRandomizationEnabled" />
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="3">
                            <MudPaper Class="d-flex align-start mud-width-full" Style="margin-top: -20px;" Elevation="0">
                                <MudTooltip Text="Chance for food/drink items to be full resource usage." Color="Color.Primary" Placement="Placement.Left" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialFoodRateMaxChance" Label="Full Chance" HelperText="Food/Drink" Variant="Variant.Filled" Min="1" Max="100" Disabled="!_specialResourceRandomizationEnabled" />
                                </MudTooltip>
                                <MudTooltip Text="Lowest percent possible for a food/drink item's usage to be." Color="Color.Primary" Placement="Placement.Left" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialFoodRateUsagePercent" Label="Minimum %" HelperText="Food/Drink" Variant="Variant.Filled" Min="1" Max="100" Disabled="!_specialResourceRandomizationEnabled" />
                                </MudTooltip>
                                <MudSpacer />
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="1" />

                        <MudItem xs="1" />
                        <MudItem xs="4">
                            <MudPaper Class="d-flex align-center mud-width-full ma-1" Elevation="0">
                                <MudTooltip Text="Allows configurable weapon durability." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                    <MudText>Weapon Durability Changes</MudText>
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="6">
                            <MudPaper Class="d-flex align-center mud-width-full" Elevation="0">
                                <MudSwitch T="bool" @bind-Value="_specialWeaponDurabilityEnabled" Color="Color.Success" UncheckedColor="Color.Default" LabelPlacement="Placement.End">@_specialWeaponDurabilityEnabled</MudSwitch>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="1">
                            @if (MainLayout._appUndoButtonToggle && (
                           MainLayout.pendingChanges.Contains("_specialWeaponDurabilityEnabled") ||
                           MainLayout.pendingChanges.Contains("_specialWeaponDurabilityMin") ||
                           MainLayout.pendingChanges.Contains("_specialWeaponDurabilityMax") ||
                           MainLayout.pendingChanges.Contains("_specialWeaponDurabilityMinDelta") ||
                           MainLayout.pendingChanges.Contains("_specialWeaponDurabilityMaxDelta")))
                            {
                                <MudButton @onclick="undoWeaponDurability" Variant="Variant.Filled" Color="Color.Inherit" Size="Size.Small">Undo</MudButton>
                            }
                            else if (MainLayout._appDefaultButtonToggle && (
                            _specialWeaponDurabilityEnabled != true ||
                            _specialWeaponDurabilityMin != 90 ||
                            _specialWeaponDurabilityMax != 100 ||
                            _specialWeaponDurabilityMinDelta != 0 ||
                            _specialWeaponDurabilityMaxDelta != 10))
                            {
                                <MudButton @onclick="defaultWeaponDurability" Variant="Variant.Filled" Color="Color.Dark" Size="Size.Small">Default</MudButton>
                            }
                        </MudItem>

                        <MudItem xs="2" />
                        <MudItem xs="3">
                            <MudTooltip Text="Adjust weapon durability values." Color="Color.Primary" Placement="Placement.Right" Arrow="true">
                                <MudText>Weapon Durability Values</MudText>
                            </MudTooltip>
                        </MudItem>
                        <MudItem xs="2">
                            <MudPaper Class="d-flex align-start mud-width-full" Style="margin-top: -20px;" Elevation="0">
                                <MudTooltip Text="Lowest a weapon's 'non-repairable' durability can be." Color="Color.Primary" Placement="Placement.Bottom" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialWeaponDurabilityMin" Label="Min" HelperText="Durability" Variant="Variant.Filled"
                                                     Min="0"
                                                     Max="_specialWeaponDurabilityMax"
                                                     Disabled="!_specialWeaponDurabilityEnabled" />
                                </MudTooltip>
                                <MudTooltip Text="Highest a weapon's 'non-repairable' durability can be." Color="Color.Primary" Placement="Placement.Bottom" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense"
                                                     HideSpinButtons="true"
                                                     @bind-Value="_specialWeaponDurabilityMax"
                                                     Label="Max"
                                                     HelperText="Durability"
                                                     Variant="Variant.Filled"
                                                     Min="_specialWeaponDurabilityMin"
                                                     Max="100"
                                                     Disabled="!_specialWeaponDurabilityEnabled" />
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="2">
                            <MudPaper Class="d-flex align-start mud-width-full" Style="margin-top: -20px;" Elevation="0">
                                <MudTooltip Text="Lowest possible difference from the rolled 'non-repairable' durabilty to the 'current' durability." Color="Color.Primary" Placement="Placement.Bottom" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense"
                                                     HideSpinButtons="true"
                                                     @bind-Value="_specialWeaponDurabilityMinDelta"
                                                     Label="Min"
                                                     HelperText="Delta"
                                                     Variant="Variant.Filled"
                                                     Min="0"
                                                     Max="100"
                                                     Validation="@(new Func<int, bool>(ValidateDelta))"
                                                     Disabled="!_specialWeaponDurabilityEnabled" />
                                </MudTooltip>
                                <MudTooltip Text="Highest possible difference from the rolled 'non-repairable' durabilty to the 'current' durability." Color="Color.Primary" Placement="Placement.Bottom" Arrow="true">
                                    <MudNumericField Margin="Margin.Dense"
                                                     HideSpinButtons="true"
                                                     @bind-Value="_specialWeaponDurabilityMaxDelta"
                                                     Label="Max"
                                                     HelperText="Delta"
                                                     Variant="Variant.Filled"
                                                     Min="0"
                                                     Max="100"
                                                     Validation="@(new Func<int, bool>(ValidateDelta))"
                                                     Disabled="!_specialWeaponDurabilityEnabled" />
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="2">
                            <MudPaper Class="d-flex align-start mud-width-full" Style="margin-top: -20px;" Elevation="0">
                                <MudTooltip Text="Lowest Possible Current Durability Roll." Color="Color.Primary" Placement="Placement.Bottom" Arrow="true">
                                    <MudNumericField Disabled Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialWeaponDurabilityMinLimitPercent" Label="Min" HelperText="Actual" Variant="Variant.Filled"
                                                     Min="0"
                                                     Max="100" />
                                </MudTooltip>
                                <MudTooltip Text="Highest Possible Current Durability Roll." Color="Color.Primary" Placement="Placement.Bottom" Arrow="true">
                                    <MudNumericField Disabled Margin="Margin.Dense" HideSpinButtons="true" @bind-Value="_specialWeaponDurabilityMaxLimitPercent" Label="Max" HelperText="Actual" Variant="Variant.Filled"
                                                     Min="0"
                                                     Max="100" />
                                </MudTooltip>
                            </MudPaper>
                        </MudItem>
                        <MudItem xs="1" />

                    </MudGrid>
                </MudExpansionPanel>
            }
        </MudExpansionPanels>
    </MudContainer>
</MudMainContent>

@code {
    #region ENABLE / DISABLE
    private bool _specialEnabled
    {
        get => Data.specialBots.enable;
        set
        {
            Utils.UpdateView(value, OriginalConfig.specialBots.enable);
            Data.specialBots.enable = value;
        }
    }
    private void undoSpecialBots() => _specialEnabled = OriginalConfig.specialBots.enable;
    private void defaultSpecialBots() => _specialEnabled = true;
    #endregion
    #region LOOT
    private bool _specialLootEnabled
    {
        get => Data.specialBots.lootConfig.enable;
        set
        {
            Data.specialBots.lootConfig.enable = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.lootConfig.enable);
        }
    }
    private string _lootBlacklistEntryHolder { get; set; } = "";

    private List<string> _specialLootBlacklist
    {
        get => Data.specialBots.lootConfig.blacklist;
        set
        {
            Data.specialBots.lootConfig.blacklist = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.lootConfig.blacklist);
        }
    }

    private void undoLoot()
    {
        _specialLootEnabled = OriginalConfig.specialBots.lootConfig.enable;
        _specialLootBlacklist.Clear();
        foreach (var item in OriginalConfig.specialBots.lootConfig.blacklist)
        {
            _specialLootBlacklist.Add(item);
        }
        MainLayout.pendingChanges.Remove("_specialLootBlacklist");
    }

    private void defaultLoot()
    {
        _specialLootEnabled = true;
        _specialLootBlacklist.Clear();
        MainLayout.pendingChanges.Add("_specialLootBlacklist");
    }
    #endregion
    #region RESOURCE RANDOMIZATION
    private bool _specialResourceRandomizationEnabled
    {
        get => Data.specialBots.resourceRandomization.enable;
        set
        {
            Data.specialBots.resourceRandomization.enable = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.resourceRandomization.enable);
        }
    }
    private int _specialFoodRateMaxChance
    {
        get => Data.specialBots.resourceRandomization.foodRateMaxChance;
        set
        {
            Data.specialBots.resourceRandomization.foodRateMaxChance = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.resourceRandomization.foodRateMaxChance);
        }
    }
    private int _specialFoodRateUsagePercent
    {
        get => Data.specialBots.resourceRandomization.foodRateUsagePercent;
        set
        {
            Data.specialBots.resourceRandomization.foodRateUsagePercent = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.resourceRandomization.foodRateUsagePercent);
        }
    }
    private int _specialMedRateMaxChance
    {
        get => Data.specialBots.resourceRandomization.medRateMaxChance;
        set
        {
            Data.specialBots.resourceRandomization.medRateMaxChance = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.resourceRandomization.medRateMaxChance);
        }
    }
    private int _specialMedRateUsagePercent
    {
        get => Data.specialBots.resourceRandomization.medRateUsagePercent;
        set
        {
            Data.specialBots.resourceRandomization.medRateUsagePercent = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.resourceRandomization.medRateUsagePercent);
        }
    }
    private void undoResourceRandomization()
    {
        _specialResourceRandomizationEnabled = OriginalConfig.specialBots.resourceRandomization.enable;
        _specialFoodRateMaxChance = OriginalConfig.specialBots.resourceRandomization.foodRateMaxChance;
        _specialFoodRateUsagePercent = OriginalConfig.specialBots.resourceRandomization.foodRateUsagePercent;
        _specialMedRateMaxChance = OriginalConfig.specialBots.resourceRandomization.medRateMaxChance;
        _specialMedRateUsagePercent = OriginalConfig.specialBots.resourceRandomization.medRateUsagePercent;
    }
    private void defaultResourceRandomization()
    {
        _specialResourceRandomizationEnabled = true;
        _specialFoodRateMaxChance = 15;
        _specialFoodRateUsagePercent = 25;
        _specialMedRateMaxChance = 15;
        _specialMedRateUsagePercent = 25;
    }
    #endregion
    #region DURABILITY
    private bool _specialWeaponDurabilityEnabled
    {
        get => Data.specialBots.weaponDurability.enable;
        set
        {
            Data.specialBots.weaponDurability.enable = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.weaponDurability.enable);
        }
    }
    private int _specialWeaponDurabilityMin
    {
        get => Data.specialBots.weaponDurability.min;
        set
        {
            Data.specialBots.weaponDurability.minLimitPercent = value - Data.specialBots.weaponDurability.maxDelta;
            Data.specialBots.weaponDurability.min = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.weaponDurability.min);
        }
    }
    private int _specialWeaponDurabilityMax
    {
        get => Data.specialBots.weaponDurability.max;
        set
        {
            Data.specialBots.weaponDurability.max = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.weaponDurability.max);
        }
    }
    private int _specialWeaponDurabilityMinDelta
    {
        get => Data.specialBots.weaponDurability.minDelta;
        set
        {
            Data.specialBots.weaponDurability.minDelta = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.weaponDurability.minDelta);
        }
    }
    private int _specialWeaponDurabilityMaxDelta
    {
        get => Data.specialBots.weaponDurability.maxDelta;
        set
        {
            Data.specialBots.weaponDurability.minLimitPercent = Data.specialBots.weaponDurability.min - value;
            Data.specialBots.weaponDurability.maxDelta = value;
            Utils.UpdateView(value, OriginalConfig.specialBots.weaponDurability.maxDelta);
        }
    }
    private int _specialWeaponDurabilityMinLimitPercent
    {
        get => Data.specialBots.weaponDurability.minLimitPercent;
        set { }
    }
    private int _specialWeaponDurabilityMaxLimitPercent
    {
        get => Data.specialBots.weaponDurability.max - Data.specialBots.weaponDurability.minDelta;
        set { }
    }

    private void undoWeaponDurability()
    {
        _specialWeaponDurabilityEnabled = OriginalConfig.specialBots.weaponDurability.enable;
        _specialWeaponDurabilityMin = OriginalConfig.specialBots.weaponDurability.min;
        _specialWeaponDurabilityMax = OriginalConfig.specialBots.weaponDurability.max;
        _specialWeaponDurabilityMinDelta = OriginalConfig.specialBots.weaponDurability.minDelta;
        _specialWeaponDurabilityMaxDelta = OriginalConfig.specialBots.weaponDurability.maxDelta;
        _specialWeaponDurabilityMinLimitPercent = OriginalConfig.specialBots.weaponDurability.minLimitPercent;
    }
    private void defaultWeaponDurability()
    {
        _specialWeaponDurabilityEnabled = true;
        _specialWeaponDurabilityMin = 90;
        _specialWeaponDurabilityMax = 100;
        _specialWeaponDurabilityMinDelta = 0;
        _specialWeaponDurabilityMaxDelta = 10;
        _specialWeaponDurabilityMinLimitPercent = Data.specialBots.weaponDurability.min - Data.specialBots.weaponDurability.maxDelta;
    }
    #endregion

    #region INPUT HANDLING
    private bool HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            return true;
        }
        return false;
    }

    private bool CanAddMongoIDToList(string value, List<string> list)
    {
        if (value != null)
        {
            bool containsAlready = list.FirstOrDefault(s => s.Contains(value)) == value ? true : false;
            if (!containsAlready && Utils.IsHexAndValidLength(value))
            {
                return true;
            }
            else if (containsAlready)
            {
                Snackbar.Add("Already blacklisted.", Severity.Error, config => { config.ShowCloseIcon = false; });
                return false;
            }
            else
            {
                Snackbar.Add("Invalid MongoID.", Severity.Error, config => { config.ShowCloseIcon = false; });
                return false;
            }
        }
        return false;
    }

    private void OnChipClosed(string item, List<string> list)
    {
        if (item != null)
        {
            list.Remove(item);
        }
    }

    public bool ValidateDelta(int value)
    {
        if (_specialWeaponDurabilityMinLimitPercent < _specialWeaponDurabilityMaxLimitPercent)
        {
            return true;
        }
        return false;
    }
    #endregion

    #region CASCADING PARAMETERS
    [CascadingParameter] public APBSConfig.Shared.MainLayout? Layout { get; set; }
    #endregion
}